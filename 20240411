{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMOExBJJa6VlYYasKf6/vGo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ciellleen/20240321-/blob/main/20240411\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. $\\sqrt{3x-1}+(1+x)^2$"
      ],
      "metadata": {
        "id": "FqxoBp9_kgba"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sympy as sp\n",
        "\n",
        "# 변수 정의\n",
        "x = sp.symbols('x')\n",
        "\n",
        "# 사용자로부터 x 값 입력 받기\n",
        "x_value = int(input(\"x 값 입력: \"))\n",
        "\n",
        "# 식 정의\n",
        "expression = sp.sqrt(3*x - 1) + (1 + x)**2\n",
        "\n",
        "# x 값 할당하여 계산\n",
        "result = expression.subs(x, x_value)\n",
        "\n",
        "# 결과 출력\n",
        "print(\"결과:\", result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_W-poMKhhrsy",
        "outputId": "23eb277b-3e76-4f8b-91b0-321ec24f4fed"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x 값 입력: 3\n",
            "결과: 2*sqrt(2) + 16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2."
      ],
      "metadata": {
        "id": "dWRc5EWOs5Qr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!ls /content"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9gqZTjESslCk",
        "outputId": "efc82abb-3556-4fa3-f794-b02efe57afed"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sample_data\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3."
      ],
      "metadata": {
        "id": "CiAJkiO5tFpb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "f = open(\"numbers\",\"w\")\n",
        "f.write(\"10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100\\n\")\n",
        "f = open(\"numbers\",\"r\")\n",
        "a = f.read()\n",
        "print(a)\n",
        "f.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g5hxqWzktAXz",
        "outputId": "83e66a8d-c3bc-442f-f364-08a2ced2a690"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "20\n",
            "30\n",
            "40\n",
            "50\n",
            "60\n",
            "70\n",
            "80\n",
            "90\n",
            "100\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4."
      ],
      "metadata": {
        "id": "uZZV-a00n1nz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    '이름' : ['철수','영희','길동'],\n",
        "    '나이' : ['20','21','22'],\n",
        "    '성별' : ['남','여','남']\n",
        "}\n",
        "\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ncwJy4bun1wz",
        "outputId": "df08e673-3bae-4e7c-9968-60ca5a5e9ee7"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   이름  나이 성별\n",
            "0  철수  20  남\n",
            "1  영희  21  여\n",
            "2  길동  22  남\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5."
      ],
      "metadata": {
        "id": "dVp9EiAfuVnC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "thisdict = {\n",
        "    \"brand\": \"ford\",\n",
        "    \"model\": \"mustang\",\n",
        "    \"year\" : 1964\n",
        "}\n",
        "thisdict.update({\"color\": \"red\"})\n",
        "print(thisdict)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BU1v2XXutmHM",
        "outputId": "6a0cd729-81d3-4802-987d-7215d389b1ed"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'brand': 'ford', 'model': 'mustang', 'year': 1964, 'color': 'red'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6."
      ],
      "metadata": {
        "id": "fxKJR-tuy8Dz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "#1. 배열 생성\n",
        "arr = np.array([1,2,3,4,5])\n",
        "#2. 배열 크기 확인\n",
        "print(arr.shape)\n",
        "#3. 배열 자료형 확인\n",
        "print(arr.dtype)\n",
        "#4. 배열 차원확인\n",
        "print(arr.ndim)\n",
        "#5. 배열의 모든 원소에 10을 더하기\n",
        "arr += 10\n",
        "print(arr)\n",
        "#6. 배열의 모든 원소를 2로 나누기\n",
        "arr =arr.astype(np.float64) #나누기가 부동 소숫점일 수 있어서 이렇게 해 준다. 또는 int64fh\n",
        "arr /= 2\n",
        "print(arr)\n",
        "#7. 배열의 평균 구하기\n",
        "print(np.mean(arr))\n",
        "#8. 배열의 표준 편차 구하기\n",
        "print(np.std(arr))\n",
        "#9. 배열의 최댓값 구하기\n",
        "print(np.max(arr))\n",
        "#10. 배열의 최솟값 구하기\n",
        "print(np.min(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HEOF24i1xd_k",
        "outputId": "85d4b1ba-68dc-41ca-83e4-36d9dc5993e9"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(5,)\n",
            "int64\n",
            "1\n",
            "[11 12 13 14 15]\n",
            "[5.5 6.  6.5 7.  7.5]\n",
            "6.5\n",
            "0.7071067811865476\n",
            "7.5\n",
            "5.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7."
      ],
      "metadata": {
        "id": "45tY9NkHy7mK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy\n",
        "arr = numpy.array([1, 2, 3, 4, 5])\n",
        "print(arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HffqVwBU0EJc",
        "outputId": "d3ddb16d-1135-4e99-8d42-56192b89c769"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8."
      ],
      "metadata": {
        "id": "HAnvqjR91j_D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy\n",
        "arr = numpy.array([1, 2, 3, 4, 5])\n",
        "print(arr[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IT6SzX8I1gbs",
        "outputId": "c19bf21e-7ce1-4239-d559-394a52e4a02c"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9."
      ],
      "metadata": {
        "id": "xYzIOmgE2FhD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "b = \"Hello, World!\"\n",
        "print(b[2:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Q0Z-oXL14EM",
        "outputId": "370a1822-2017-492f-be22-520844f2eb2b"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "llo\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10."
      ],
      "metadata": {
        "id": "M6i-LtAA2Gyr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = \"Hello\"\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ja-cR95q2H3p",
        "outputId": "dbdd74bd-0efa-4291-bbf3-2c4eaed837c2"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n"
          ]
        }
      ]
    }
  ]
}